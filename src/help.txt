Shelly can be asked using: 
    - shelly
    - shelly,
    - Shelly
    - Shelly,
    - sweetie
    - Sweetie
    - sweetie,
    - Sweetie,
    - sweety
    - Sweety
    - sweety,
    - Sweety,


Shelly can answer the following:
    
    - INFO
          1. do I have {program_name}
             ** Tells if {program_name} is installed
          
          2. whats my system
             ** Prints general info about the system
          
          3. whats my username
             who am i
             whoami
             tellme my username
             tell me my username
             username
             ** Print username
    
    - SYSTEM
           1. hows my disk space
              disk space
              ** Tells how much disk space is used (in percent). Considers mounted partitions only
           
           2. update system
              update os
              update distro
              update distribution
              ** Update distribution
           
           3. update os and apps
              update all
              update system and apps
              update apps and os
              ** Update all installed applications and distribution. Full system update
           
           4. which {program_name}
              ** Prints location of a command. i.e. Path to command
           
           5. what {program_name}
              what version is {program_name}
              ** Output the version of {program_name}, if installed
           
           6. install/uninstall {program_name}
              ** Install {program_name}, if the package is in the repositories

           7. update apps
              update applications
              ** Update installed applications
    
    - HELP
           1. shelly help
              shelly what do you know
              ** Show help. i.e. Display this file.
    
    - SEARCH FUNCTIONS
           1. search {string}
              ** Ouput FILENAME:NR_OF_MATCHES, if there are matches for {string} in
              current folder or its subfolders

           2. search any {string}
              ** Ouput FILENAME:NR_OF_MATCHES, if there are matches for {string} in
              current folder or its subfolders. CASE-INsensitive

           3. search {string} in my files
              ** Ouput FILENAME:NR_OF_MATCHES, if there are matches for {string} in
              user's home folder

           4. search {string} in all files
              ** Ouput FILENAME:NR_OF_MATCHES, if there are matches for {string} in
              all files. Search in "/"

           5. search {string} in this directory
              search {string} in this folder
              ** Ouput FILENAME:NR_OF_MATCHES, if there are matches for {string} in
              current folder EXCLUDING subfolders

           6. search any {string} in my files
              ** Ouput FILENAME:NR_OF_MATCHES, if there are matches for {string} in
              user's home folder. CASE-INsensitive

           7. search any {string} in all files
              ** Ouput FILENAME:NR_OF_MATCHES, if there are matches for {string} in
              all files. Search in "/". CASE-INsensitive

           8. search any {string} in this directory
              search any {string} in this folder
              ** Ouput FILENAME:NR_OF_MATCHES, if there are matches for {string} in
              current folder EXCLUDING subfolders. CASE-INsensitive

           9. search {string} in files ending with {end_string}
              ** Ouput FILENAME:NR_OF_MATCHES, if there are matches for {string} in
              current folder or its subfolders, considers only files
              ending in {end_string}.
          
          10. search {string} in files starting with {start_string}
              ** Ouput FILENAME:NR_OF_MATCHES, if there are matches for {string} in
              current folder or its subfolders, considers only files
              starting in {start_string}.
          
          11. search {string} in files that contain {name_string} 
              ** Ouput FILENAME:NR_OF_MATCHES, if there are matches for {string} in
              current folder or its subfolders, considers only files
              with name containing {name_string}
          
          12. search any {string} in files ending with {end_string}
              ** Ouput FILENAME:NR_OF_MATCHES, if there are matches for {string} in
              current folder or its subfolders, considers only files
              ending in {end_string}. CASE-INsensitive
          
          13. search any {string} in files starting with {start_string}
              ** Ouput FILENAME:NR_OF_MATCHES, if there are matches for {string} in
              current folder or its subfolders, considers only files
              starting in {start_string}. CASE-INsensitive
          
          14. search any {string} in files that contain {name_string} 
              ** Ouput FILENAME:NR_OF_MATCHES, if there are matches for {string} in
              current folder or its subfolders, considers only files
              with name containing {name_string}. CASE-INsensitive
    
    - OTHER
           1.levenshteinDistance "string1" "string2"  (!!! this one works without "shelly" prefix)
            ** Computes Levenshtein's distance. 
           BUGs: very slow (recursive implementation); There are test cases that are not handled correctly

    - EMOTIONAL/FUN
           1. whats the meaning of life
              why do we live
           2. do you love me
              i love you
           3. will you marry me
           4. laugh with me
              its a joke
              it was a joke
              laugh out loud
              lol
           5. give me a hug
           6. not bad
           7. rage
           8. me gusta
           9. you dont say
          10. can you read
          11. you are grumpy
          12. do you understand how i feel
          13. lets work 
              ** Knowledge base to make interacting with Shelly fun, emotional, 
              and simulate basic AI. [in development]