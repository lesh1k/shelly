#!/bin/bash - is used to tell system what program to use to run the file.
---------------------------------------------

about redirect. from: http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO-3.html

Basically you can:

redirect stdout to a file   1>filename
redirect stderr to a file   2>filename
redirect stdout to a stderr 1>&2
redirect stderr to a stdout  2>&1
redirect stderr and stdout to a file  &> filename
redirect stderr and stdout to stdout
redirect stderr and stdout to stderr

1 'represents' stdout and 2 stderr.
--------------------------------------------------

Pipes -  let you use (very simple, I insist) the output of a program as the input of another one

This is very simple way to use pipes.

         ls -l | sed -e "s/[aeio]/u/g"   
        
Here, the following happens: first the command ls -l is executed, and it's output, instead of being printed, is sent (piped) to the sed program, which in turn, prints what it has to.
---------------------------------------------------------

VARIABLES

You can use variables as in any programming languages. There are no data types. A variable in bash can contain a number, a character, a string of characters.

You have no need to declare a variable, just assigning a value to its reference will create it.

Then the VALUE of this variable is retrieved by putting the '$' in at the beginning. Please notice (try it!) that if you don't use the '$' sign, the output of the program will be different, and probably not what you want it to be.

Local variables can be created by using the keyword local.
--------------------------------------------------------------

if [ -z "$1" ]; then    -  The expression in the first conditional tests if the program has received an argument ($1) and quits if it didn't,
--------------------------------------------------------------

Getting the return value of a program

In bash, the return value of a program is stored in a special variable called $?.
----------------------------------------------------------------

11.1 String comparison operators

(1) s1 = s2

(2) s1 != s2

(3) s1 < s2

(4) s1 > s2

(5) -n s1

(6) -z s1

(1) s1 matches s2

(2) s1 does not match s2

(3) __TO-DO__

(4) __TO-DO__

(5) s1 is not null (contains one or more characters)

(6) s1 is null